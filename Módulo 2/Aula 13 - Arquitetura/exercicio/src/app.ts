import express from "express"
// Importa o framework Express, utilizado para lidar com rotas e requisi√ß√µes HTTP.

import { makeTransaction } from "./factories/make-transaction"
// Importa a fun√ß√£o makeTransaction do arquivo 'make-transaction.ts' localizado na pasta './factories/'.

const app = express()
// Cria uma inst√¢ncia do aplicativo Express.

app.use(express.json())
// Adiciona o middleware express.json() para permitir o parsing de corpos de requisi√ß√£o no formato JSON.

const transactionController = makeTransaction()
// Cria uma inst√¢ncia do controlador de transa√ß√µes utilizando a fun√ß√£o makeTransaction.

// Define as rotas e associa cada uma a uma fun√ß√£o do controlador de transa√ß√µes.
app.post("/transactions", transactionController.create.bind(transactionController))
// Rota para criar uma nova transa√ß√£o. Utiliza o m√©todo 'create' do controlador de transa√ß√µes.

app.get("/transactions", (req, res) => {
  return transactionController.list(req, res)
})
// Rota para listar todas as transa√ß√µes. Utiliza o m√©todo 'list' do controlador de transa√ß√µes.

app.get("/transactions/:id", transactionController.getById)
// Rota para obter uma transa√ß√£o por ID. Utiliza o m√©todo 'getById' do controlador de transa√ß√µes.

app.listen(3000, () => {
  console.log("üõº Server is running")
})
// Inicia o servidor na porta 3000 e exibe uma mensagem no console quando o servidor estiver rodando.

/*
Este coment√°rio descreve a configura√ß√£o das rotas no aplicativo Express, associando cada rota a uma fun√ß√£o espec√≠fica do controlador de transa√ß√µes. O middleware express.json() √© utilizado para permitir o parsing de corpos de requisi√ß√£o no formato JSON. O servidor √© iniciado na porta 3000 e uma mensagem √© exibida no console indicando que o servidor est√° em execu√ß√£o.
*/